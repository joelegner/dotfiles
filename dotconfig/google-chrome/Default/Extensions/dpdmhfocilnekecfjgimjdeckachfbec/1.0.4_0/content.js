// Generated by CoffeeScript 1.9.3
var EXTENSION_VERSION, close_onboarding, onboarding_event, promise_message_handler,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

EXTENSION_VERSION = chrome.runtime.getManifest().version;

document.head.setAttribute("data-dropbox-version", EXTENSION_VERSION);

promise_message_handler = function(message) {
  return new Promise(function(resolve, reject) {
    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
      if (request.message === message) {
        resolve();
      }
    });
  });
};

onboarding_event = promise_message_handler("onboarding_tab");

close_onboarding = promise_message_handler("close_onboarding");

Promise.all([
  InboxSDK.load('1', SDK_APP_ID), InboxSDK.loadScript(DROPINS_URL), new Promise(function(resolve, reject) {
    return chrome.storage.local.get("guid", resolve);
  }), new Promise(function(resolve, reject) {
    return chrome.storage.sync.get("is_disabled", resolve);
  })
]).then(function(results) {
  var add_custom_attachment_card, add_download_to_dropbox_button, compose_view_handler, create_onboarding_flyout, create_photo_preview_elem, display_chooser, get_link_previews, is_eligible_link, is_email_blacklisted, log, log_guid, log_key, message_view_handler, parse_file_name, register_all_handlers, removeTooltip, sdk, set_onboarding_tooltip_seen, show_onboarding_tooltip, skip_onboarding, trigger_onboarding;
  sdk = results[0];
  log_guid = results[2].guid;
  log_key = new jsSHA(sdk.User.getEmailAddress(), "TEXT").getHash("SHA-1", "HEX");
  skip_onboarding = false;
  if (results[3].is_disabled) {
    return;
  }
  Dropbox.VERSION = 3;
  Dropbox.init({
    appKey: DROPINS_APP_KEY
  });
  log = function(event_name, extra, callback) {
    if (extra == null) {
      extra = {};
    }
    return Util.log(event_name, log_guid, log_key, EXTENSION_VERSION, extra, callback);
  };
  log("load");
  register_all_handlers = function() {
    sdk.Compose.registerComposeViewHandler(compose_view_handler);
    sdk.Conversations.registerMessageViewHandler(message_view_handler);
    if (!skip_onboarding) {
      return onboarding_event.then(trigger_onboarding);
    }
  };
  compose_view_handler = function(compose_view) {
    var button;
    button = compose_view.addButton({
      title: chrome.i18n.getMessage("add_file"),
      iconUrl: chrome.runtime.getURL("images/logo.png"),
      type: 'MODIFIER',
      onClick: function() {
        return display_chooser(compose_view);
      }
    });
    if (!skip_onboarding) {
      skip_onboarding = true;
      chrome.storage.sync.get("seen_onboarding_tooltip", function(results) {
        if (!results.seen_onboarding_tooltip) {
          log("show_onboarding_tooltip");
          show_onboarding_tooltip(compose_view, button);
        }
      });
    }
  };
  message_view_handler = function(message_view) {
    var filtered_links, links;
    if (!is_email_blacklisted(message_view)) {
      links = message_view.getLinksInBody();
      filtered_links = links.filter(is_eligible_link).map(function(link) {
        return link.href;
      });
      if (filtered_links.length) {
        get_link_previews(filtered_links, function(response) {
          var i, len, link_info;
          if (response.length) {
            log("preview_render", {
              count: response.length
            });
          }
          for (i = 0, len = response.length; i < len; i++) {
            link_info = response[i];
            add_custom_attachment_card(message_view, link_info);
          }
        });
      }
      add_download_to_dropbox_button(message_view);
    }
  };
  trigger_onboarding = function() {
    sdk.Compose.openNewComposeView();
  };
  register_all_handlers();
  is_email_blacklisted = function(message_view) {
    var all_users, i, len, ref, user;
    all_users = message_view.getRecipients();
    all_users.push(message_view.getSender());
    for (i = 0, len = all_users.length; i < len; i++) {
      user = all_users[i];
      if (ref = new jsSHA(user.emailAddress, "TEXT").getHash("SHA-1", "HEX"), indexOf.call(EMAIL_HASH_BLACKLIST, ref) >= 0) {
        return true;
      }
    }
    return false;
  };
  add_download_to_dropbox_button = function(message_view) {
    var attachment_card, attachment_cards, i, len, results1;
    attachment_cards = message_view.getFileAttachmentCardViews();
    results1 = [];
    for (i = 0, len = attachment_cards.length; i < len; i++) {
      attachment_card = attachment_cards[i];
      results1.push((function(attachment_card) {
        var fetch_url_fn;
        fetch_url_fn = function(on_success) {
          var on_fulfilled, on_rejected, url_promise;
          url_promise = attachment_card.getDownloadURL();
          on_fulfilled = function(download_url) {
            on_success({
              url: download_url
            });
          };
          on_rejected = function() {
            log("attachment_download_url_invalid");
            on_success(null);
          };
          url_promise.then(on_fulfilled, on_rejected);
        };
        return attachment_card.addButton({
          iconUrl: chrome.runtime.getURL('images/white_icon48.png'),
          tooltip: chrome.i18n.getMessage('saver_button_tooltip'),
          onClick: function() {
            var ext, filename;
            filename = parse_file_name(attachment_card);
            ext = filename ? Util.get_ext(filename) : "";
            log("open_saver", {
              ext: ext,
              type: "attachment"
            });
            Dropbox.save({
              files: [
                {
                  url: fetch_url_fn,
                  filename: filename
                }
              ],
              success: function() {
                log("save_success", {
                  ext: ext,
                  type: "attachment"
                });
                sdk.ButterBar.showMessage({
                  text: chrome.i18n.getMessage('saver_success')
                });
              },
              progress: null,
              cancel: null,
              error: function(err) {
                log("save_failed", {
                  ext: ext,
                  error: err,
                  type: "attachment"
                });
                alert(chrome.i18n.getMessage('saver_error'));
              }
            });
          }
        });
      })(attachment_card));
    }
    return results1;
  };
  parse_file_name = function(attachment_card) {
    var cardElem, download_url, filename, match, re;
    cardElem = attachment_card._attachmentCardImplementation.getElement();
    download_url = cardElem.getAttribute('download_url');
    re = /([^:]+):([^:]+):(.+)/;
    match = re.exec(download_url);
    if (!match) {
      return;
    }
    filename = decodeURIComponent(match[2]);
    return filename;
  };
  is_eligible_link = function(link) {
    return !link.isInQuotedArea && DBX_LINK_RE.test(link.href);
  };
  get_link_previews = function(links, callback) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.withCredentials = true;
    xhr.onload = function() {
      var error, resp;
      try {
        resp = JSON.parse(xhr.responseText);
        return callback(resp);
      } catch (_error) {
        error = _error;
      }
    };
    xhr.open("GET", (DROPBOX_BASE + "/extension/check_links?links=") + encodeURIComponent(JSON.stringify(links)), true);
    xhr.send();
  };
  add_custom_attachment_card = function(message_view, link_info) {
    var buttons, ext, file_name, icon, params, parts, path;
    path = link_info.link.split(/[?\#]/)[0];
    parts = path.split('/');
    file_name = decodeURIComponent(parts[parts.length - 1]);
    ext = Util.get_ext(file_name);
    params = {
      title: link_info.display_name || file_name,
      previewUrl: link_info.link,
      fileIconImageUrl: chrome.runtime.getURL('images/icon16.png'),
      foldColor: "#007EE5",
      description: link_info.description,
      previewOnClick: function() {
        log("preview_click", {
          ext: ext
        });
      }
    };
    buttons = [];
    if (link_info.dl_link != null) {
      buttons.push({
        downloadUrl: link_info.dl_link,
        onClick: function() {
          return log("download_link", {
            ext: ext
          });
        }
      });
    }
    if (link_info.allow_saver) {
      buttons.push({
        iconUrl: chrome.runtime.getURL('images/white_icon48.png'),
        tooltip: chrome.i18n.getMessage('saver_button_tooltip'),
        onClick: function() {
          log("open_saver", {
            ext: ext,
            type: "shared_link"
          });
          Dropbox.save({
            files: [
              {
                url: link_info.link,
                filename: params.title
              }
            ],
            success: function() {
              log("save_success", {
                ext: ext,
                type: "shared_link"
              });
              sdk.ButterBar.showMessage({
                text: chrome.i18n.getMessage('saver_success')
              });
            },
            error: function(err) {
              log("save_failed", {
                ext: ext,
                error: err,
                type: "shared_link"
              });
              alert(chrome.i18n.getMessage('saver_error'));
            }
          });
        }
      });
    }
    params['buttons'] = buttons;
    icon = link_info.file_icon || chrome.runtime.getURL('images/icon128.png');
    if (link_info.preview_link != null) {
      params['previewThumbnailUrl'] = link_info.preview_link;
      params['failoverPreviewIconUrl'] = icon;
      message_view.addAttachmentCardView(params);
    } else {
      params['iconThumbnailUrl'] = icon;
      message_view.addAttachmentCardViewNoPreview(params);
    }
  };
  display_chooser = function(compose_view) {
    var chooser_wrapper, cleanup, modal, modal_elm, on_cancel, on_message, on_success;
    log("open_chooser");
    on_success = function(files) {
      var bounding_box, ext_array, file, i, is_photo, len, mode, photo_elem, thumbnail_link;
      if (compose_view.getSelectedBodyText() && files.length === 1) {
        file = files[0];
        log("insert_link", {
          ext: Util.get_ext(file.name)
        });
        compose_view.insertLinkIntoBodyAtCursor(file.name, file.link);
      } else {
        ext_array = [];
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          ext_array.push(Util.get_ext(file.name));
          thumbnail_link = file.thumbnailLink;
          is_photo = Util.is_photo(file.name) && thumbnail_link && !file.is_dir;
          if (thumbnail_link) {
            bounding_box = is_photo ? "800" : "75";
            mode = is_photo ? "fit" : "crop";
            thumbnail_link = thumbnail_link.split("?")[0] + ("?bounding_box=" + bounding_box + "&mode=" + mode);
          } else if (file.is_dir) {
            thumbnail_link = CDN_BASE + "/static/images/gmail_attachment_folder_icon.png";
          } else {
            thumbnail_link = CDN_BASE + "/static/images/gmail_attachment_logo.png";
          }
          if (is_photo) {
            photo_elem = create_photo_preview_elem(file, thumbnail_link);
            compose_view.insertHTMLIntoBodyAtCursor(photo_elem);
          } else {
            compose_view.insertLinkChipIntoBodyAtCursor(file.name, file.link, thumbnail_link);
          }
        }
        log("insert_link", {
          exts: JSON.stringify(ext_array)
        });
      }
      modal.close();
      cleanup();
    };
    on_cancel = function() {
      modal.close();
      cleanup();
    };
    on_message = function(evt) {
      var data, dest;
      if (evt.source.parent === chooser_wrapper.contentWindow) {
        data = JSON.parse(evt.data);
        dest = evt.source;
        switch (data.method) {
          case "origin_request":
            evt.source.postMessage(JSON.stringify({
              method: "origin"
            }), DROPBOX_BASE);
            break;
          case "files_selected":
            on_success(data.params);
            break;
          case "close_dialog":
            on_cancel();
        }
      }
    };
    window.addEventListener("message", on_message, false);
    cleanup = function() {
      window.removeEventListener("message", on_message, false);
    };
    chooser_wrapper = document.createElement("iframe");
    chooser_wrapper.src = chrome.runtime.getURL("blank.html");
    chooser_wrapper.style.display = "block";
    chooser_wrapper.style.width = "640px";
    chooser_wrapper.style.height = "552px";
    chooser_wrapper.style.maxWidth = "100%";
    chooser_wrapper.style.border = "none";
    modal = sdk.Modal.show({
      el: chooser_wrapper,
      chrome: false
    });
    modal_elm = chooser_wrapper.parentElement.parentElement;
    modal_elm.style.border = "1px solid rgba(71, 82, 93, 0.2)";
    modal_elm.style.borderRadius = "4px";
    modal_elm.style.boxShadow = "0 0 10px 2px rgba(123, 137, 148, 0.1)";
  };
  create_photo_preview_elem = function(file, thumbnail_link) {
    var img, img_container, link, link_container, preview_container;
    preview_container = document.createElement('div');
    img_container = document.createElement('div');
    img = document.createElement('img');
    img.src = thumbnail_link;
    img.style.maxWidth = "425px";
    img.style.maxHeight = "800px";
    img_container.appendChild(img);
    preview_container.appendChild(img_container);
    link_container = document.createElement('div');
    link = document.createElement('a');
    link.href = file.link;
    link.textContent = file.name;
    link_container.appendChild(link);
    preview_container.appendChild(link_container);
    return preview_container;
  };
  show_onboarding_tooltip = function(compose_view, button) {
    document.addEventListener("animationstart", function(event) {
      var safe_overlay;
      if (event.animationName === "tooltip_appeared") {
        safe_overlay = document.createElement("div");
        safe_overlay.className = "onboarding-overlay";
        safe_overlay.addEventListener("click", function(event) {
          event.preventDefault();
          log("onboarding-dismissed-by-click-outside");
          removeTooltip(button);
          return set_onboarding_tooltip_seen();
        });
        document.body.appendChild(safe_overlay);
      }
    });
    return button.showTooltip({
      el: create_onboarding_flyout(compose_view, button)
    });
  };
  set_onboarding_tooltip_seen = function() {
    chrome.storage.sync.set({
      "seen_onboarding_tooltip": true
    });
    chrome.runtime.sendMessage({
      message: "onboarding_tooltip_seen"
    });
  };
  removeTooltip = function(button) {
    var i, len, overlay, ref;
    button.closeTooltip();
    ref = document.getElementsByClassName("onboarding-overlay");
    for (i = 0, len = ref.length; i < len; i++) {
      overlay = ref[i];
      overlay.style.display = "none";
    }
  };
  create_onboarding_flyout = function(compose_view, button) {
    var el, onboarding_title, tooltip_confirm, tooltip_disable, tooltip_dismiss, tooltip_instant, tooltip_large_files, tooltip_learn_more, tooltip_safe;
    close_onboarding.then(function() {
      removeTooltip(button);
    });
    el = document.createElement("div");
    el.setAttribute("class", "onboarding-flyout-container");
    onboarding_title = chrome.i18n.getMessage("onboarding_title");
    tooltip_large_files = chrome.i18n.getMessage("tooltip_large_files");
    tooltip_instant = chrome.i18n.getMessage("tooltip_instant");
    tooltip_safe = chrome.i18n.getMessage("tooltip_safe");
    tooltip_confirm = chrome.i18n.getMessage("tooltip_confirm");
    tooltip_dismiss = chrome.i18n.getMessage("tooltip_dismiss");
    tooltip_disable = chrome.i18n.getMessage("tooltip_disable");
    tooltip_learn_more = chrome.i18n.getMessage("tooltip_learn_more");
    el.innerHTML = "<img src=" + (chrome.runtime.getURL('images/x.png')) + " class='onboarding-dismiss-x'></div> <div class='onboarding-title'> " + onboarding_title + " </div> <ul class='onboarding-tip-list'> <li>" + tooltip_large_files + "</li> <li>" + tooltip_instant + "</li> <li>" + tooltip_safe + "</li> </ul> <div class='onboarding-buttons'> <button class='button-primary onboarding-confirm'>" + tooltip_confirm + "</button> </div> <div class='onboarding-footer-divider'></div> <div class='onboarding-footer'> <a href='' class='onboarding-disable'>" + tooltip_disable + "</a> <a target='_blank' href='https://www.dropbox.com/help/8807'>" + tooltip_learn_more + "</a> </div>";
    el.getElementsByClassName("onboarding-confirm")[0].addEventListener("click", function(event) {
      event.preventDefault();
      log('onboarding-confirmed');
      display_chooser(compose_view);
      removeTooltip(button);
    });
    el.getElementsByClassName("onboarding-disable")[0].addEventListener("click", function(event) {
      event.preventDefault();
      log('onboarding-disable-clicked', {}, function() {
        chrome.runtime.sendMessage(chrome.runtime.id, {
          message: "uninstall_self"
        });
      });
      removeTooltip(button);
    });
    el.getElementsByClassName("onboarding-dismiss-x")[0].addEventListener("click", function(event) {
      event.preventDefault();
      log('onboarding-dismissed');
      removeTooltip(button);
    });
    el.addEventListener("click", function(event) {
      set_onboarding_tooltip_seen();
    });
    return el;
  };
})["catch"](function(err) {
  console.error(err);
});
